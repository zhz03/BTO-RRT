% ==============================================================================
%
%    Software License Agreement (BSD License)
%    Copyright (c) 2019
%    (www.aimlab.wpi.edu)
%
%    All rights reserved.
%
%    Redistribution and use in source and binary forms, with or without
%    modification, are permitted provided that the following conditions
%    are met:
%
%    * Redistributions of source code must retain the above copyright
%    notice, this list of conditions and the following disclaimer.
%
%    * Redistributions in binary form must reproduce the above
%    copyright notice, this list of conditions and the following
%    disclaimer in the documentation and/or other materials provided
%    with the distribution.
%
%    * Neither the name of authors nor the names of its contributors may
%    be used to endorse or promote products derived from this software
%    without specific prior written permission.
%
%    THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
%    "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
%    LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
%    FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE
%    COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
%    INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
%    BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
%    LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
%    CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
%    LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
%    ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
%    POSSIBILITY OF SUCH DAMAGE.
%
%    \author:    <http://www.aimlab.wpi.edu>
%    \author:    <amunawar@wpi.edu>
%    \author:    Adnan Munawar
%    \version:   0.1$
% ==============================================================================

clc;
close all;
clear all;

%% load settings
name = 'map2';
type = '.bmp';
fullname = [name,type];
map=im2bw(imread(fullname)); 
% map1-3
q_init=[10 10]; % source position in Y, X format
q_goal=[490 490]; % goal position in Y, X format

% % map5-6
% q_init=[245 10 ]; % source position in Y, X format
% q_goal=[245 490 ]; % goal position in Y, X format
% % % map4
% q_init=[50 170 ]; % source position in Y, X format
% q_goal=[430 340 ]; % goal position in Y, X format
% % map7-8
% q_init=[10 490]; % source position in Y, X format
% q_goal=[490 10]; % goal position in Y, X format

% figure(1)
% imshow(map); hold on;
% title("Path generated by RRT star");
% plot(q_init(2),q_init(1),'*b','LineWidth',4);
% plot(q_goal(2),q_goal(1),'*r', 'LineWidth', 4);

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%


dim = 2;
stepsize = [10];

radius = 20;
samples = 4000;

start_cord = q_init;
goal_cord = q_goal;
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% t_star = [];
% l_star = [];
% p_star = [];
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%% main
segmentLength = stepsize(1);
    

time = 0;
avg_its = 0;
avg_path = 0;

[n_its,run_time,path,tree] = RRTstar3D(segmentLength,radius,map,samples,start_cord,goal_cord);
%[n_its path_n,run_time] = Copy_2_RRTstar3D(segmentLength,radius,map,show_output,samples,start_cord,goal_cord);
%[its,sizePath,run_time] =  Copy_RRTstar3D(dim,segmentLength,radius,0,show_output,samples);
time = time + run_time;
avg_its = avg_its + n_its;

     
Path = [path(:,1),path(:,2)];

pathLength=0;
for i=1:length(Path)-1, pathLength=pathLength+distanceCost(Path(i,1:2),Path(i+1,1:2)); end

figure;
imshow(map); hold on;
title("Path generated by RRT star");
plot(q_init(2),q_init(1),'*b','LineWidth',4);
plot(q_goal(2),q_goal(1),'*r', 'LineWidth', 4);
plotExpandedTree(tree,dim);
plot(path(:,2),path(:,1),'-b','LineWidth',2);


% figure;
% imshow(map); hold on;
% title("Path generated by RRT star");
% 
% plot(path(:,2),path(:,1),'-b','LineWidth',2);
function plotExpandedTree(tree,dim)
ind = size(tree,1);
while ind>0
    branch = [];
    node = tree(ind,:);
    branch = [ branch ; node ];
    parent_node = node(dim+3);
    while parent_node > 1
        cur_parent = parent_node;
        branch = [branch; tree(parent_node,:)];
        parent_node = tree(parent_node,dim+3);
    end
    ind = ind - 1;
    
    if dim == 2
        X = branch(:,1);
        Y = branch(:,2);
        
        p = plot(Y,X);
        set(p,'Color','r','LineWidth',0.5,'Marker','.','MarkerEdgeColor','g');
        hold on;
        
   
    end
end
end
